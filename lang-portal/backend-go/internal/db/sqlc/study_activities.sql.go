// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: study_activities.sql

package db

import (
	"context"
	"database/sql"
)

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, name, words_count, created_at FROM groups
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGroupByID(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WordsCount,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionStats = `-- name: GetSessionStats :one
SELECT 
    COUNT(*) as total_words,
    SUM(CASE WHEN correct THEN 1 ELSE 0 END) as correct_words
FROM word_review_items
WHERE study_session_id = ?
`

type GetSessionStatsRow struct {
	TotalWords   int64           `json:"total_words"`
	CorrectWords sql.NullFloat64 `json:"correct_words"`
}

func (q *Queries) GetSessionStats(ctx context.Context, studySessionID int64) (GetSessionStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionStats, studySessionID)
	var i GetSessionStatsRow
	err := row.Scan(&i.TotalWords, &i.CorrectWords)
	return i, err
}

const getStudyActivityByID = `-- name: GetStudyActivityByID :one
SELECT id, name, thumbnail_url, description, created_at, launch_url FROM study_activities
WHERE id = ? LIMIT 1
`

func (q *Queries) GetStudyActivityByID(ctx context.Context, id int64) (StudyActivity, error) {
	row := q.db.QueryRowContext(ctx, getStudyActivityByID, id)
	var i StudyActivity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ThumbnailUrl,
		&i.Description,
		&i.CreatedAt,
		&i.LaunchUrl,
	)
	return i, err
}

const getStudySessionsByActivityID = `-- name: GetStudySessionsByActivityID :many
SELECT 
    s.id,
    s.created_at,
    s.group_id,
    sa.name as activity_name
FROM study_sessions s
JOIN study_activities sa ON s.study_activity_id = sa.id
WHERE sa.id = ?
ORDER BY s.created_at DESC
LIMIT 100
`

type GetStudySessionsByActivityIDRow struct {
	ID           int64        `json:"id"`
	CreatedAt    sql.NullTime `json:"created_at"`
	GroupID      int64        `json:"group_id"`
	ActivityName string       `json:"activity_name"`
}

func (q *Queries) GetStudySessionsByActivityID(ctx context.Context, id int64) ([]GetStudySessionsByActivityIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudySessionsByActivityID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStudySessionsByActivityIDRow{}
	for rows.Next() {
		var i GetStudySessionsByActivityIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.GroupID,
			&i.ActivityName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
