// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: words.sql

package db

import (
	"context"
)

const createWord = `-- name: CreateWord :one
INSERT INTO words (
  italian, english, parts
) VALUES (
  ?, ?, ?
)
RETURNING id, italian, english, parts, created_at, correct_count, wrong_count
`

type CreateWordParams struct {
	Italian string      `json:"italian"`
	English string      `json:"english"`
	Parts   interface{} `json:"parts"`
}

func (q *Queries) CreateWord(ctx context.Context, arg CreateWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, createWord, arg.Italian, arg.English, arg.Parts)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.Italian,
		&i.English,
		&i.Parts,
		&i.CreatedAt,
		&i.CorrectCount,
		&i.WrongCount,
	)
	return i, err
}

const deleteWord = `-- name: DeleteWord :exec
DELETE FROM words
WHERE id = ?
`

func (q *Queries) DeleteWord(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWord, id)
	return err
}

const getWord = `-- name: GetWord :one
SELECT id, italian, english, parts, created_at, correct_count, wrong_count FROM words
WHERE id = ? LIMIT 1
`

func (q *Queries) GetWord(ctx context.Context, id int64) (Word, error) {
	row := q.db.QueryRowContext(ctx, getWord, id)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.Italian,
		&i.English,
		&i.Parts,
		&i.CreatedAt,
		&i.CorrectCount,
		&i.WrongCount,
	)
	return i, err
}

const listWords = `-- name: ListWords :many
SELECT id, italian, english, parts, created_at, correct_count, wrong_count FROM words
ORDER BY id
`

func (q *Queries) ListWords(ctx context.Context) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, listWords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Word{}
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.Italian,
			&i.English,
			&i.Parts,
			&i.CreatedAt,
			&i.CorrectCount,
			&i.WrongCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWord = `-- name: UpdateWord :one
UPDATE words
SET italian = ?, english = ?, parts = ?
WHERE id = ?
RETURNING id, italian, english, parts, created_at, correct_count, wrong_count
`

type UpdateWordParams struct {
	Italian string      `json:"italian"`
	English string      `json:"english"`
	Parts   interface{} `json:"parts"`
	ID      int64       `json:"id"`
}

func (q *Queries) UpdateWord(ctx context.Context, arg UpdateWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, updateWord,
		arg.Italian,
		arg.English,
		arg.Parts,
		arg.ID,
	)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.Italian,
		&i.English,
		&i.Parts,
		&i.CreatedAt,
		&i.CorrectCount,
		&i.WrongCount,
	)
	return i, err
}
